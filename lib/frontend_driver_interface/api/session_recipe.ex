# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule FrontendDriverInterface.Api.SessionRecipe do
  @moduledoc """
  API calls for all endpoints tagged `SessionRecipe`.
  """

  alias FrontendDriverInterface.Connection
  import FrontendDriverInterface.RequestBuilder


  @doc """
  Refresh the user session 

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - s_id_refresh_token (String.t): 
  - s_refresh_token (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :rid (String.t): 
    - :anti_csrf (String.t): This will only be here if enabled by the user.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec refresh(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:error, Tesla.Env.t}
  def refresh(connection, api_base_path, s_id_refresh_token, s_refresh_token, opts \\ []) do
    optional_params = %{
      :"rid" => :headers,
      :"anti-csrf" => :headers
    }
    %{}
    |> method(:post)
    |> url("/#{api_base_path}/session/refresh")
    |> add_param(, :"sIdRefreshToken", s_id_refresh_token)
    |> add_param(, :"sRefreshToken", s_refresh_token)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end

  @doc """
  Logout user 

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - s_id_refresh_token (String.t): 
  - s_refresh_token (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :rid (String.t): 
    - :anti_csrf (String.t): This will only be here if enabled by the user.
    - :body (map()): 
  ## Returns

  {:ok, FrontendDriverInterface.Model.InlineResponse2006.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec signout(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, FrontendDriverInterface.Model.InlineResponse2006.t} | {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:error, Tesla.Env.t}
  def signout(connection, api_base_path, s_id_refresh_token, s_refresh_token, opts \\ []) do
    optional_params = %{
      :"rid" => :headers,
      :"anti-csrf" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/#{api_base_path}/signout")
    |> add_param(, :"sIdRefreshToken", s_id_refresh_token)
    |> add_param(, :"sRefreshToken", s_refresh_token)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FrontendDriverInterface.Model.InlineResponse2006{}},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end
end
