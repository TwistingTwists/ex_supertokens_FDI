# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule FrontendDriverInterface.Api.ThirdPartyPasswordlessRecipe do
  @moduledoc """
  API calls for all endpoints tagged `ThirdPartyPasswordlessRecipe`.
  """

  alias FrontendDriverInterface.Connection
  import FrontendDriverInterface.RequestBuilder


  @doc """
  Signin/up a user  Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.  

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - opts (KeywordList): [optional] Optional parameters
    - :rid (String.t): 
    - :third_party_id (String.t): 
  ## Returns

  {:ok, FrontendDriverInterface.Model.InlineResponse2005.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec third_party_passwordless_authorisation_url(Tesla.Env.client, String.t, keyword()) :: {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.InlineResponse2005.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:error, Tesla.Env.t}
  def third_party_passwordless_authorisation_url(connection, api_base_path, opts \\ []) do
    optional_params = %{
      :"rid" => :headers,
      :"thirdPartyId" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{api_base_path}/authorisationurl⠀⠀")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FrontendDriverInterface.Model.InlineResponse2005{}},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end

  @doc """
  Handles sign in with the apple.  Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.  

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - opts (KeywordList): [optional] Optional parameters
    - :code (String.t): The Authorization code which will be exchanged for an access token
    - :state (String.t): A unique string used to mitigate CSRF attacks
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec third_party_passwordless_callback_apple(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:error, Tesla.Env.t}
  def third_party_passwordless_callback_apple(connection, api_base_path, opts \\ []) do
    optional_params = %{
      :"code" => :form,
      :"state" => :form
    }
    %{}
    |> method(:post)
    |> url("/#{api_base_path}/callback/apple⠀⠀")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end

  @doc """
  Check if an email exists  Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.  

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - email (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :rid (String.t): 
  ## Returns

  {:ok, FrontendDriverInterface.Model.InlineResponse2003.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec third_party_passwordless_email_exists(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.InlineResponse2003.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:error, Tesla.Env.t}
  def third_party_passwordless_email_exists(connection, api_base_path, email, opts \\ []) do
    optional_params = %{
      :"rid" => :headers
    }
    %{}
    |> method(:get)
    |> url("/#{api_base_path}/signup/email/exists⠀⠀⠀")
    |> add_param(:query, :"email", email)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FrontendDriverInterface.Model.InlineResponse2003{}},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end

  @doc """
  Check if a phone number exists  Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.  

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - phone_number (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :rid (String.t): 
  ## Returns

  {:ok, FrontendDriverInterface.Model.InlineResponse2003.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec third_party_passwordless_phone_number_exists(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.InlineResponse2003.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:error, Tesla.Env.t}
  def third_party_passwordless_phone_number_exists(connection, api_base_path, phone_number, opts \\ []) do
    optional_params = %{
      :"rid" => :headers
    }
    %{}
    |> method(:get)
    |> url("/#{api_base_path}/signup/phonenumber/exists⠀")
    |> add_param(:query, :"phoneNumber", phone_number)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FrontendDriverInterface.Model.InlineResponse2003{}},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end

  @doc """
  Signin/up a user using a Social Provider  Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.  

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - opts (KeywordList): [optional] Optional parameters
    - :rid (String.t): 
    - :body (ApiBasePathSigninupBody): Should contain one of code or authCodeResponse, clientId is optional
  ## Returns

  {:ok, FrontendDriverInterface.Model.InlineResponse2004.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec third_party_passwordless_sign_in_up(Tesla.Env.client, String.t, keyword()) :: {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.InlineResponse2004.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:error, Tesla.Env.t}
  def third_party_passwordless_sign_in_up(connection, api_base_path, opts \\ []) do
    optional_params = %{
      :"rid" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/#{api_base_path}/signinup⠀⠀")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FrontendDriverInterface.Model.InlineResponse2004{}},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end

  @doc """
  Finish sign in/up process with passwordless  Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.  

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - opts (KeywordList): [optional] Optional parameters
    - :rid (String.t): 
    - :body (CodeConsumeBody): 
  ## Returns

  {:ok, FrontendDriverInterface.Model.InlineResponse2002.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec third_party_passwordless_sign_in_up_consume(Tesla.Env.client, String.t, keyword()) :: {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.InlineResponse2002.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:error, Tesla.Env.t}
  def third_party_passwordless_sign_in_up_consume(connection, api_base_path, opts \\ []) do
    optional_params = %{
      :"rid" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/#{api_base_path}/signinup/code/consume⠀")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FrontendDriverInterface.Model.InlineResponse2002{}},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end

  @doc """
  Resend passwordless code  Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.  

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - opts (KeywordList): [optional] Optional parameters
    - :rid (String.t): 
    - :body (CodeResendBody): 
  ## Returns

  {:ok, FrontendDriverInterface.Model.InlineResponse2001.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec third_party_passwordless_sign_in_up_resend(Tesla.Env.client, String.t, keyword()) :: {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:ok, FrontendDriverInterface.Model.InlineResponse2001.t} | {:error, Tesla.Env.t}
  def third_party_passwordless_sign_in_up_resend(connection, api_base_path, opts \\ []) do
    optional_params = %{
      :"rid" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/#{api_base_path}/signinup/code/resend⠀")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FrontendDriverInterface.Model.InlineResponse2001{}},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end

  @doc """
  Start sign in/up process with passwordless.  Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.  

  ## Parameters

  - connection (FrontendDriverInterface.Connection): Connection to server
  - api_base_path (String.t): Its value depends on the apiBasePath set by the user
  - opts (KeywordList): [optional] Optional parameters
    - :rid (String.t): 
    - :body (SigninupCodeBody): 
  ## Returns

  {:ok, FrontendDriverInterface.Model.InlineResponse200.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec third_party_passwordless_sign_in_up_start(Tesla.Env.client, String.t, keyword()) :: {:ok, FrontendDriverInterface.Model.InlineResponse200.t} | {:ok, FrontendDriverInterface.Model.InternalError.t} | {:ok, FrontendDriverInterface.Model.NotFound.t} | {:error, Tesla.Env.t}
  def third_party_passwordless_sign_in_up_start(connection, api_base_path, opts \\ []) do
    optional_params = %{
      :"rid" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/#{api_base_path}/signinup/code⠀")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FrontendDriverInterface.Model.InlineResponse200{}},
      { 404, %FrontendDriverInterface.Model.NotFound{}},
      { 500, %FrontendDriverInterface.Model.InternalError{}}
    ])
  end
end
